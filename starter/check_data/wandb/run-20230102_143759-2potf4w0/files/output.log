[1m===================================================================================================== test session starts ======================================================================================================
platform darwin -- Python 3.11.0, pytest-7.2.0, pluggy-1.0.0 -- /Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/bin/python3.11
cachedir: .pytest_cache
rootdir: /Users/philipherp/Documents/Udacity/Machine_Learning_DevOps/genre_classification/starter/check_data
[1mcollecting ... 
[1mcollected 4 items                                                                                                                                                                                                              
test_data.py::test_column_presence_and_type [31mERROR
test_data.py::test_class_names [31mERROR
test_data.py::test_column_ranges [31mERROR
test_data.py::test_kolmogorov_smirnov [31mERROR
============================================================================================================ ERRORS ============================================================================================================
[31m[1m_______________________________________________________________________________________ ERROR at setup of test_column_presence_and_type ________________________________________________________________________________________
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>
    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String,
            $projectName: String,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
>           response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:5006:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
args = (<wandb.apis.public.RetryingClient object at 0x17cab3d10>, Document(definitions=[OperationDefinition(operation='query'...n_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))]))
kargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    @functools.wraps(fn)
    def wrapped_fn(*args: Any, **kargs: Any) -> Any:
>       return retrier(*args, **kargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/lib/retry.py[39m[22m:190:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb.sdk.lib.retry.Retry object at 0x170dea010>
args = (<wandb.apis.public.RetryingClient object at 0x17cab3d10>, Document(definitions=[OperationDefinition(operation='query'...n_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))]))
kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}, retry_timedelta = datetime.timedelta(seconds=20), num_retries = 1000000, sleep_base = 1
check_retry_fn = <function no_retry_auth at 0x170fb6d40>, sleep = 1, now = datetime.datetime(2023, 1, 2, 14, 38, 9, 877401), start_time = datetime.datetime(2023, 1, 2, 14, 38, 9, 877401), start_time_triggered = None
    def __call__(self, *args: Any, **kwargs: Any) -> _R:
        """Call the wrapped function, with retries.
        Arguments:
           retry_timedelta (kwarg): amount of time to retry before giving up.
           sleep_base (kwarg): amount of time to sleep upon first failure, all other sleeps
               are derived from this one.
        """
        retry_timedelta = kwargs.pop("retry_timedelta", self._retry_timedelta)
        if retry_timedelta is None:
            retry_timedelta = datetime.timedelta(days=365)
        num_retries = kwargs.pop("num_retries", self._num_retries)
        if num_retries is None:
            num_retries = 1000000
        if os.environ.get("WANDB_TEST"):
            num_retries = 0
        sleep_base: float = kwargs.pop("retry_sleep_base", 1)
        # an extra function to allow performing more logic on the filtered exception
        check_retry_fn: CheckRetryFnType = kwargs.pop(
            "check_retry_fn", self._check_retry_fn
        )
        sleep = sleep_base
        now = self._datetime_now_fn()
        start_time = now
        start_time_triggered = None
        self._num_iter = 0
        while True:
            try:
>               result = self._call_fn(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/lib/retry.py[39m[22m:113:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb.apis.public.RetryingClient object at 0x17cab3d10>
args = (Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Varia..._set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))]),)
kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    @retry.retriable(
        retry_timedelta=RETRY_TIMEDELTA,
        check_retry_fn=util.no_retry_auth,
        retryable_exceptions=(RetryError, requests.RequestException),
    )
    def execute(self, *args, **kwargs):
        try:
>           return self._client.execute(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:239:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb_gql.client.Client object at 0x17cab3d50>
document = Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Variab...on_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))])
args = (), kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    def execute(self, document, *args, **kwargs):
        if self.schema:
            self.validate(document)
>       result = self._get_result(document, *args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/vendor/gql-0.2.0/wandb_gql/client.py[39m[22m:52:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb_gql.client.Client object at 0x17cab3d50>
document = Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Variab...on_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))])
args = (), kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    def _get_result(self, document, *args, **kwargs):
        if not self.retries:
>           return self.transport.execute(document, *args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/vendor/gql-0.2.0/wandb_gql/client.py[39m[22m:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb_gql.transport.requests.RequestsHTTPTransport object at 0x17bbc1450>
document = Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Variab...on_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))])
variable_values = {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}, timeout = None
    def execute(self, document, variable_values=None, timeout=None):
        query_str = print_ast(document)
        payload = {
            'query': query_str,
            'variables': variable_values or {}
        }
        data_key = 'json' if self.use_json else 'data'
        post_args = {
            'headers': self.headers,
            'auth': self.auth,
            'cookies': self.cookies,
            'timeout': timeout or self.default_timeout,
            data_key: payload
        }
        request = requests.post(self.url, **post_args)
>       request.raise_for_status()
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/vendor/gql-0.2.0/wandb_gql/transport/requests.py[39m[22m:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <Response [400]>
    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
        if 400 <= self.status_code < 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
        elif 500 <= self.status_code < 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
        if http_error_msg:
>           raise HTTPError(http_error_msg, response=self)
[31m[1mE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.wandb.ai/graphql
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/requests/models.py[39m[22m:1021: HTTPError
[33mDuring handling of the above exception, another exception occurred:
args = (<wandb.apis.public.Api object at 0x17cab2910>,), kwargs = {'name': 'sample_data.csv', 'type': None}, message = 'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
payload = 'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/normalize.py[39m[22m:26:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb.apis.public.Api object at 0x17cab2910>, name = 'sample_data.csv', type = None
    @normalize_exceptions
    def artifact(self, name, type=None):
        """
        Returns a single artifact by parsing path in the form `entity/project/run_id`.
        Arguments:
            name: (str) An artifact name. May be prefixed with entity/project. Valid names
                can be in the following forms:
                    name:version
                    name:alias
                    digest
            type: (str, optional) The type of artifact to fetch.
        Returns:
            A `Artifact` object.
        """
        if name is None:
            raise ValueError("You must specify name= to fetch an artifact.")
        entity, project, artifact_name = self._parse_artifact_path(name)
>       artifact = Artifact(self.client, entity, project, artifact_name)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:941:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>, client = <wandb.apis.public.RetryingClient object at 0x17cab3d10>, entity = 'philipherp'
project = 'exercise_14', name = 'sample_data.csv', attrs = None
    def __init__(self, client, entity, project, name, attrs=None):
        self.client = client
        self._entity = entity
        self._project = project
        self._artifact_name = name
        self._artifact_collection_name = name.split(":")[0]
        self._attrs = attrs
        if self._attrs is None:
>           self._load()
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:4315:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>
    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String,
            $projectName: String,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
>               raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
[31m[1mE               ValueError: Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:5018: ValueError
[33mDuring handling of the above exception, another exception occurred:
request = <SubRequest 'data' for <Function test_column_presence_and_type>>
    @pytest.fixture(scope="session")
    def data(request):
        reference_artifact = request.config.option.reference_artifact
        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")
        sample_artifact = request.config.option.sample_artifact
        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")
        local_path = run.use_artifact(reference_artifact).file()
        sample1 = pd.read_csv(local_path)
>       local_path = run.use_artifact(sample_artifact).file()
[31m[1mconftest.py[39m[22m:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/wandb_run.py[39m[22m:255: in wrapper
    return func(self, *args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/wandb_run.py[39m[22m:2606: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/normalize.py[39m[22m:62: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/normalize.py[39m[22m:26: in wrapper
    return func(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:941: in artifact
    artifact = Artifact(self.client, entity, project, artifact_name)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:4315: in __init__
    self._load()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>
    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String,
            $projectName: String,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
>               raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
[31m[1mE               wandb.errors.CommError: Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:5018: CommError
[31m[1m______________________________________________________________________________________________ ERROR at setup of test_class_names ______________________________________________________________________________________________
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>
    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String,
            $projectName: String,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
>           response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:5006:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
args = (<wandb.apis.public.RetryingClient object at 0x17cab3d10>, Document(definitions=[OperationDefinition(operation='query'...n_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))]))
kargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    @functools.wraps(fn)
    def wrapped_fn(*args: Any, **kargs: Any) -> Any:
>       return retrier(*args, **kargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/lib/retry.py[39m[22m:190:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb.sdk.lib.retry.Retry object at 0x170dea010>
args = (<wandb.apis.public.RetryingClient object at 0x17cab3d10>, Document(definitions=[OperationDefinition(operation='query'...n_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))]))
kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}, retry_timedelta = datetime.timedelta(seconds=20), num_retries = 1000000, sleep_base = 1
check_retry_fn = <function no_retry_auth at 0x170fb6d40>, sleep = 1, now = datetime.datetime(2023, 1, 2, 14, 38, 9, 877401), start_time = datetime.datetime(2023, 1, 2, 14, 38, 9, 877401), start_time_triggered = None
    def __call__(self, *args: Any, **kwargs: Any) -> _R:
        """Call the wrapped function, with retries.
        Arguments:
           retry_timedelta (kwarg): amount of time to retry before giving up.
           sleep_base (kwarg): amount of time to sleep upon first failure, all other sleeps
               are derived from this one.
        """
        retry_timedelta = kwargs.pop("retry_timedelta", self._retry_timedelta)
        if retry_timedelta is None:
            retry_timedelta = datetime.timedelta(days=365)
        num_retries = kwargs.pop("num_retries", self._num_retries)
        if num_retries is None:
            num_retries = 1000000
        if os.environ.get("WANDB_TEST"):
            num_retries = 0
        sleep_base: float = kwargs.pop("retry_sleep_base", 1)
        # an extra function to allow performing more logic on the filtered exception
        check_retry_fn: CheckRetryFnType = kwargs.pop(
            "check_retry_fn", self._check_retry_fn
        )
        sleep = sleep_base
        now = self._datetime_now_fn()
        start_time = now
        start_time_triggered = None
        self._num_iter = 0
        while True:
            try:
>               result = self._call_fn(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/lib/retry.py[39m[22m:113:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb.apis.public.RetryingClient object at 0x17cab3d10>
args = (Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Varia..._set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))]),)
kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    @retry.retriable(
        retry_timedelta=RETRY_TIMEDELTA,
        check_retry_fn=util.no_retry_auth,
        retryable_exceptions=(RetryError, requests.RequestException),
    )
    def execute(self, *args, **kwargs):
        try:
>           return self._client.execute(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:239:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb_gql.client.Client object at 0x17cab3d50>
document = Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Variab...on_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))])
args = (), kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    def execute(self, document, *args, **kwargs):
        if self.schema:
            self.validate(document)
>       result = self._get_result(document, *args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/vendor/gql-0.2.0/wandb_gql/client.py[39m[22m:52:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb_gql.client.Client object at 0x17cab3d50>
document = Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Variab...on_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))])
args = (), kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    def _get_result(self, document, *args, **kwargs):
        if not self.retries:
>           return self.transport.execute(document, *args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/vendor/gql-0.2.0/wandb_gql/client.py[39m[22m:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb_gql.transport.requests.RequestsHTTPTransport object at 0x17bbc1450>
document = Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Variab...on_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))])
variable_values = {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}, timeout = None
    def execute(self, document, variable_values=None, timeout=None):
        query_str = print_ast(document)
        payload = {
            'query': query_str,
            'variables': variable_values or {}
        }
        data_key = 'json' if self.use_json else 'data'
        post_args = {
            'headers': self.headers,
            'auth': self.auth,
            'cookies': self.cookies,
            'timeout': timeout or self.default_timeout,
            data_key: payload
        }
        request = requests.post(self.url, **post_args)
>       request.raise_for_status()
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/vendor/gql-0.2.0/wandb_gql/transport/requests.py[39m[22m:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <Response [400]>
    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
        if 400 <= self.status_code < 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
        elif 500 <= self.status_code < 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
        if http_error_msg:
>           raise HTTPError(http_error_msg, response=self)
[31m[1mE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.wandb.ai/graphql
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/requests/models.py[39m[22m:1021: HTTPError
[33mDuring handling of the above exception, another exception occurred:
args = (<wandb.apis.public.Api object at 0x17cab2910>,), kwargs = {'name': 'sample_data.csv', 'type': None}, message = 'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
payload = 'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/normalize.py[39m[22m:26:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb.apis.public.Api object at 0x17cab2910>, name = 'sample_data.csv', type = None
    @normalize_exceptions
    def artifact(self, name, type=None):
        """
        Returns a single artifact by parsing path in the form `entity/project/run_id`.
        Arguments:
            name: (str) An artifact name. May be prefixed with entity/project. Valid names
                can be in the following forms:
                    name:version
                    name:alias
                    digest
            type: (str, optional) The type of artifact to fetch.
        Returns:
            A `Artifact` object.
        """
        if name is None:
            raise ValueError("You must specify name= to fetch an artifact.")
        entity, project, artifact_name = self._parse_artifact_path(name)
>       artifact = Artifact(self.client, entity, project, artifact_name)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:941:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>, client = <wandb.apis.public.RetryingClient object at 0x17cab3d10>, entity = 'philipherp'
project = 'exercise_14', name = 'sample_data.csv', attrs = None
    def __init__(self, client, entity, project, name, attrs=None):
        self.client = client
        self._entity = entity
        self._project = project
        self._artifact_name = name
        self._artifact_collection_name = name.split(":")[0]
        self._attrs = attrs
        if self._attrs is None:
>           self._load()
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:4315:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>
    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String,
            $projectName: String,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
>               raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
[31m[1mE               ValueError: Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:5018: ValueError
[33mDuring handling of the above exception, another exception occurred:
request = <SubRequest 'data' for <Function test_column_presence_and_type>>
    @pytest.fixture(scope="session")
    def data(request):
        reference_artifact = request.config.option.reference_artifact
        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")
        sample_artifact = request.config.option.sample_artifact
        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")
        local_path = run.use_artifact(reference_artifact).file()
        sample1 = pd.read_csv(local_path)
>       local_path = run.use_artifact(sample_artifact).file()
[31m[1mconftest.py[39m[22m:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/wandb_run.py[39m[22m:255: in wrapper
    return func(self, *args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/wandb_run.py[39m[22m:2606: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/normalize.py[39m[22m:62: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/normalize.py[39m[22m:26: in wrapper
    return func(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:941: in artifact
    artifact = Artifact(self.client, entity, project, artifact_name)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:4315: in __init__
    self._load()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>
    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String,
            $projectName: String,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
>               raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
[31m[1mE               wandb.errors.CommError: Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:5018: CommError
[31m[1m_____________________________________________________________________________________________ ERROR at setup of test_column_ranges _____________________________________________________________________________________________
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>
    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String,
            $projectName: String,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
>           response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:5006:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
args = (<wandb.apis.public.RetryingClient object at 0x17cab3d10>, Document(definitions=[OperationDefinition(operation='query'...n_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))]))
kargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    @functools.wraps(fn)
    def wrapped_fn(*args: Any, **kargs: Any) -> Any:
>       return retrier(*args, **kargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/lib/retry.py[39m[22m:190:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb.sdk.lib.retry.Retry object at 0x170dea010>
args = (<wandb.apis.public.RetryingClient object at 0x17cab3d10>, Document(definitions=[OperationDefinition(operation='query'...n_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))]))
kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}, retry_timedelta = datetime.timedelta(seconds=20), num_retries = 1000000, sleep_base = 1
check_retry_fn = <function no_retry_auth at 0x170fb6d40>, sleep = 1, now = datetime.datetime(2023, 1, 2, 14, 38, 9, 877401), start_time = datetime.datetime(2023, 1, 2, 14, 38, 9, 877401), start_time_triggered = None
    def __call__(self, *args: Any, **kwargs: Any) -> _R:
        """Call the wrapped function, with retries.
        Arguments:
           retry_timedelta (kwarg): amount of time to retry before giving up.
           sleep_base (kwarg): amount of time to sleep upon first failure, all other sleeps
               are derived from this one.
        """
        retry_timedelta = kwargs.pop("retry_timedelta", self._retry_timedelta)
        if retry_timedelta is None:
            retry_timedelta = datetime.timedelta(days=365)
        num_retries = kwargs.pop("num_retries", self._num_retries)
        if num_retries is None:
            num_retries = 1000000
        if os.environ.get("WANDB_TEST"):
            num_retries = 0
        sleep_base: float = kwargs.pop("retry_sleep_base", 1)
        # an extra function to allow performing more logic on the filtered exception
        check_retry_fn: CheckRetryFnType = kwargs.pop(
            "check_retry_fn", self._check_retry_fn
        )
        sleep = sleep_base
        now = self._datetime_now_fn()
        start_time = now
        start_time_triggered = None
        self._num_iter = 0
        while True:
            try:
>               result = self._call_fn(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/lib/retry.py[39m[22m:113:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb.apis.public.RetryingClient object at 0x17cab3d10>
args = (Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Varia..._set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))]),)
kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    @retry.retriable(
        retry_timedelta=RETRY_TIMEDELTA,
        check_retry_fn=util.no_retry_auth,
        retryable_exceptions=(RetryError, requests.RequestException),
    )
    def execute(self, *args, **kwargs):
        try:
>           return self._client.execute(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:239:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb_gql.client.Client object at 0x17cab3d50>
document = Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Variab...on_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))])
args = (), kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    def execute(self, document, *args, **kwargs):
        if self.schema:
            self.validate(document)
>       result = self._get_result(document, *args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/vendor/gql-0.2.0/wandb_gql/client.py[39m[22m:52:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb_gql.client.Client object at 0x17cab3d50>
document = Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Variab...on_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))])
args = (), kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    def _get_result(self, document, *args, **kwargs):
        if not self.retries:
>           return self.transport.execute(document, *args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/vendor/gql-0.2.0/wandb_gql/client.py[39m[22m:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb_gql.transport.requests.RequestsHTTPTransport object at 0x17bbc1450>
document = Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Variab...on_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))])
variable_values = {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}, timeout = None
    def execute(self, document, variable_values=None, timeout=None):
        query_str = print_ast(document)
        payload = {
            'query': query_str,
            'variables': variable_values or {}
        }
        data_key = 'json' if self.use_json else 'data'
        post_args = {
            'headers': self.headers,
            'auth': self.auth,
            'cookies': self.cookies,
            'timeout': timeout or self.default_timeout,
            data_key: payload
        }
        request = requests.post(self.url, **post_args)
>       request.raise_for_status()
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/vendor/gql-0.2.0/wandb_gql/transport/requests.py[39m[22m:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <Response [400]>
    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
        if 400 <= self.status_code < 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
        elif 500 <= self.status_code < 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
        if http_error_msg:
>           raise HTTPError(http_error_msg, response=self)
[31m[1mE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.wandb.ai/graphql
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/requests/models.py[39m[22m:1021: HTTPError
[33mDuring handling of the above exception, another exception occurred:
args = (<wandb.apis.public.Api object at 0x17cab2910>,), kwargs = {'name': 'sample_data.csv', 'type': None}, message = 'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
payload = 'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/normalize.py[39m[22m:26:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb.apis.public.Api object at 0x17cab2910>, name = 'sample_data.csv', type = None
    @normalize_exceptions
    def artifact(self, name, type=None):
        """
        Returns a single artifact by parsing path in the form `entity/project/run_id`.
        Arguments:
            name: (str) An artifact name. May be prefixed with entity/project. Valid names
                can be in the following forms:
                    name:version
                    name:alias
                    digest
            type: (str, optional) The type of artifact to fetch.
        Returns:
            A `Artifact` object.
        """
        if name is None:
            raise ValueError("You must specify name= to fetch an artifact.")
        entity, project, artifact_name = self._parse_artifact_path(name)
>       artifact = Artifact(self.client, entity, project, artifact_name)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:941:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>, client = <wandb.apis.public.RetryingClient object at 0x17cab3d10>, entity = 'philipherp'
project = 'exercise_14', name = 'sample_data.csv', attrs = None
    def __init__(self, client, entity, project, name, attrs=None):
        self.client = client
        self._entity = entity
        self._project = project
        self._artifact_name = name
        self._artifact_collection_name = name.split(":")[0]
        self._attrs = attrs
        if self._attrs is None:
>           self._load()
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:4315:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>
    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String,
            $projectName: String,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
>               raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
[31m[1mE               ValueError: Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:5018: ValueError
[33mDuring handling of the above exception, another exception occurred:
request = <SubRequest 'data' for <Function test_column_presence_and_type>>
    @pytest.fixture(scope="session")
    def data(request):
        reference_artifact = request.config.option.reference_artifact
        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")
        sample_artifact = request.config.option.sample_artifact
        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")
        local_path = run.use_artifact(reference_artifact).file()
        sample1 = pd.read_csv(local_path)
>       local_path = run.use_artifact(sample_artifact).file()
[31m[1mconftest.py[39m[22m:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/wandb_run.py[39m[22m:255: in wrapper
    return func(self, *args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/wandb_run.py[39m[22m:2606: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/normalize.py[39m[22m:62: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/normalize.py[39m[22m:26: in wrapper
    return func(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:941: in artifact
    artifact = Artifact(self.client, entity, project, artifact_name)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:4315: in __init__
    self._load()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>
    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String,
            $projectName: String,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
>               raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
[31m[1mE               wandb.errors.CommError: Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:5018: CommError
[31m[1m__________________________________________________________________________________________ ERROR at setup of test_kolmogorov_smirnov ___________________________________________________________________________________________
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>
    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String,
            $projectName: String,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
>           response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:5006:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
args = (<wandb.apis.public.RetryingClient object at 0x17cab3d10>, Document(definitions=[OperationDefinition(operation='query'...n_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))]))
kargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    @functools.wraps(fn)
    def wrapped_fn(*args: Any, **kargs: Any) -> Any:
>       return retrier(*args, **kargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/lib/retry.py[39m[22m:190:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb.sdk.lib.retry.Retry object at 0x170dea010>
args = (<wandb.apis.public.RetryingClient object at 0x17cab3d10>, Document(definitions=[OperationDefinition(operation='query'...n_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))]))
kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}, retry_timedelta = datetime.timedelta(seconds=20), num_retries = 1000000, sleep_base = 1
check_retry_fn = <function no_retry_auth at 0x170fb6d40>, sleep = 1, now = datetime.datetime(2023, 1, 2, 14, 38, 9, 877401), start_time = datetime.datetime(2023, 1, 2, 14, 38, 9, 877401), start_time_triggered = None
    def __call__(self, *args: Any, **kwargs: Any) -> _R:
        """Call the wrapped function, with retries.
        Arguments:
           retry_timedelta (kwarg): amount of time to retry before giving up.
           sleep_base (kwarg): amount of time to sleep upon first failure, all other sleeps
               are derived from this one.
        """
        retry_timedelta = kwargs.pop("retry_timedelta", self._retry_timedelta)
        if retry_timedelta is None:
            retry_timedelta = datetime.timedelta(days=365)
        num_retries = kwargs.pop("num_retries", self._num_retries)
        if num_retries is None:
            num_retries = 1000000
        if os.environ.get("WANDB_TEST"):
            num_retries = 0
        sleep_base: float = kwargs.pop("retry_sleep_base", 1)
        # an extra function to allow performing more logic on the filtered exception
        check_retry_fn: CheckRetryFnType = kwargs.pop(
            "check_retry_fn", self._check_retry_fn
        )
        sleep = sleep_base
        now = self._datetime_now_fn()
        start_time = now
        start_time_triggered = None
        self._num_iter = 0
        while True:
            try:
>               result = self._call_fn(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/lib/retry.py[39m[22m:113:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb.apis.public.RetryingClient object at 0x17cab3d10>
args = (Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Varia..._set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))]),)
kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    @retry.retriable(
        retry_timedelta=RETRY_TIMEDELTA,
        check_retry_fn=util.no_retry_auth,
        retryable_exceptions=(RetryError, requests.RequestException),
    )
    def execute(self, *args, **kwargs):
        try:
>           return self._client.execute(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:239:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb_gql.client.Client object at 0x17cab3d50>
document = Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Variab...on_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))])
args = (), kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    def execute(self, document, *args, **kwargs):
        if self.schema:
            self.validate(document)
>       result = self._get_result(document, *args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/vendor/gql-0.2.0/wandb_gql/client.py[39m[22m:52:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb_gql.client.Client object at 0x17cab3d50>
document = Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Variab...on_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))])
args = (), kwargs = {'variable_values': {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}}
    def _get_result(self, document, *args, **kwargs):
        if not self.retries:
>           return self.transport.execute(document, *args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/vendor/gql-0.2.0/wandb_gql/client.py[39m[22m:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb_gql.transport.requests.RequestsHTTPTransport object at 0x17bbc1450>
document = Document(definitions=[OperationDefinition(operation='query', name=Name(value='Artifact'), variable_definitions=[Variab...on_set=None)])), Field(alias=None, name=Name(value='commitHash'), arguments=[], directives=[], selection_set=None)]))])
variable_values = {'entityName': 'philipherp', 'name': 'sample_data.csv', 'projectName': 'exercise_14'}, timeout = None
    def execute(self, document, variable_values=None, timeout=None):
        query_str = print_ast(document)
        payload = {
            'query': query_str,
            'variables': variable_values or {}
        }
        data_key = 'json' if self.use_json else 'data'
        post_args = {
            'headers': self.headers,
            'auth': self.auth,
            'cookies': self.cookies,
            'timeout': timeout or self.default_timeout,
            data_key: payload
        }
        request = requests.post(self.url, **post_args)
>       request.raise_for_status()
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/vendor/gql-0.2.0/wandb_gql/transport/requests.py[39m[22m:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <Response [400]>
    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
        if 400 <= self.status_code < 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
        elif 500 <= self.status_code < 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
        if http_error_msg:
>           raise HTTPError(http_error_msg, response=self)
[31m[1mE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.wandb.ai/graphql
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/requests/models.py[39m[22m:1021: HTTPError
[33mDuring handling of the above exception, another exception occurred:
args = (<wandb.apis.public.Api object at 0x17cab2910>,), kwargs = {'name': 'sample_data.csv', 'type': None}, message = 'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
payload = 'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/normalize.py[39m[22m:26:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <wandb.apis.public.Api object at 0x17cab2910>, name = 'sample_data.csv', type = None
    @normalize_exceptions
    def artifact(self, name, type=None):
        """
        Returns a single artifact by parsing path in the form `entity/project/run_id`.
        Arguments:
            name: (str) An artifact name. May be prefixed with entity/project. Valid names
                can be in the following forms:
                    name:version
                    name:alias
                    digest
            type: (str, optional) The type of artifact to fetch.
        Returns:
            A `Artifact` object.
        """
        if name is None:
            raise ValueError("You must specify name= to fetch an artifact.")
        entity, project, artifact_name = self._parse_artifact_path(name)
>       artifact = Artifact(self.client, entity, project, artifact_name)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:941:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>, client = <wandb.apis.public.RetryingClient object at 0x17cab3d10>, entity = 'philipherp'
project = 'exercise_14', name = 'sample_data.csv', attrs = None
    def __init__(self, client, entity, project, name, attrs=None):
        self.client = client
        self._entity = entity
        self._project = project
        self._artifact_name = name
        self._artifact_collection_name = name.split(":")[0]
        self._attrs = attrs
        if self._attrs is None:
>           self._load()
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:4315:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>
    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String,
            $projectName: String,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
>               raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
[31m[1mE               ValueError: Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:5018: ValueError
[33mDuring handling of the above exception, another exception occurred:
request = <SubRequest 'data' for <Function test_column_presence_and_type>>
    @pytest.fixture(scope="session")
    def data(request):
        reference_artifact = request.config.option.reference_artifact
        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")
        sample_artifact = request.config.option.sample_artifact
        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")
        local_path = run.use_artifact(reference_artifact).file()
        sample1 = pd.read_csv(local_path)
>       local_path = run.use_artifact(sample_artifact).file()
[31m[1mconftest.py[39m[22m:31:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/wandb_run.py[39m[22m:255: in wrapper
    return func(self, *args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/sdk/wandb_run.py[39m[22m:2606: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/normalize.py[39m[22m:62: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/normalize.py[39m[22m:26: in wrapper
    return func(*args, **kwargs)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:941: in artifact
    artifact = Artifact(self.client, entity, project, artifact_name)
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:4315: in __init__
    self._load()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x17cab2990>
    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String,
            $projectName: String,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
>               raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
[31m[1mE               wandb.errors.CommError: Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")
[31m[1m/Users/philipherp/opt/anaconda3/envs/mlflow-c8dc1cec297b33265a999b1cc66226a2175a8e3b/lib/python3.11/site-packages/wandb/apis/public.py[39m[22m:5018: CommError
[33m======================================================================================================= warnings summary =======================================================================================================
test_data.py::test_column_presence_and_type
  /Users/philipherp/Documents/Udacity/Machine_Learning_DevOps/genre_classification/starter/check_data/conftest.py:29: DtypeWarning: Columns (16) have mixed types. Specify dtype option on import or set low_memory=False.
    sample1 = pd.read_csv(local_path)
-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
[36m[1m=================================================================================================== short test summary info ====================================================================================================
[31mERROR[39m test_data.py::[1mtest_column_presence_and_type[22m - wandb.errors.CommError: Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")
[31mERROR[39m test_data.py::[1mtest_class_names[22m - wandb.errors.CommError: Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")
[31mERROR[39m test_data.py::[1mtest_column_ranges[22m - wandb.errors.CommError: Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")
[31mERROR[39m test_data.py::[1mtest_kolmogorov_smirnov[22m - wandb.errors.CommError: Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")
[31m================================================================================================= [33m1 warning[39m, [31m[1m4 errors[22m in 9.60s =================================================================================================